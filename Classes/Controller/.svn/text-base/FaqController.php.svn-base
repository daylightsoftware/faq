<?php
/**
 * FAQ
 *
 * @category   Extension
 * @package    HdnetFaq
 * @subpackage Controller
 * @author     Tim Lochmüller <tim.lochmueller@hdnet.de>
 */

namespace HDNET\HdnetFaq\Controller;

use HDNET\HdnetFaq\Domain\Model\Question;
use HDNET\HdnetFaq\Domain\Model\Request\Faq;
use HDNET\HdnetFaq\Domain\Model\Request\QuestionRequest;
use TYPO3\CMS\Core\Utility\GeneralUtility;

/**
 * FAQ
 *
 * @package    HdnetFaq
 * @subpackage Controller
 * @author     Tim Lochmüller <tim.lochmueller@hdnet.de>
 */
class FaqController extends AbstractController {

	const TEASER_MODE_VOTING = 0;

	const TEASER_MODE_CUSTOM = 1;

	/**
	 * Question repository
	 *
	 * @var \HDNET\HdnetFaq\Domain\Repository\QuestionRepository
	 * @inject
	 */
	protected $questionRepository;

	/**
	 * Question category repository
	 *
	 * @var \HDNET\HdnetFaq\Domain\Repository\QuestioncategoryRepository
	 * @inject
	 */
	protected $questioncategoryRepository;

	/**
	 * Index action
	 *
	 * @param \HDNET\HdnetFaq\Domain\Model\Request\Faq $faq
	 * @param bool                                     $showAll
	 */
	public function indexAction(Faq $faq = NULL, $showAll = FALSE) {
		$topCategory = (int)$this->settings['faq']['topCategory'];

		if (is_object($faq)) {
			$questions = $this->questionRepository->findByFaq($faq, $topCategory);
			$showResults = TRUE;
		} elseif ($showAll) {
			$showResults = TRUE;
			$questions = $this->questionRepository->findAll($topCategory);
		} else {
			$questions = array();
			$showResults = FALSE;
		}

		if ($this->settings['topMode'] == self::TEASER_MODE_VOTING) {
			$topQuestions = $this->questionRepository->findTop((int)$this->settings['faq']['limitTop'], $topCategory, GeneralUtility::intExplode(',', $this->settings['faq']['topQuestions'], TRUE));
		} else {
			$topQuestions = $this->questionRepository->findByUidsSorted(GeneralUtility::intExplode(',', $this->settings['custom'], TRUE));
		}

		if ($faq === NULL) {
			$faq = new \HDNET\HdnetFaq\Domain\Model\Request\Faq();
		}

		$this->view->assignMultiple(array(
			'showResults'  => $showResults,
			'faq'          => $faq,
			'questions'    => $questions,
			'newQuestions' => $this->questionRepository->findNewest((int)$this->settings['faq']['limitNewest'], $topCategory),
			'topQuestions' => $topQuestions,
			'categories'   => $this->questioncategoryRepository->findByParent($topCategory, (bool)$this->settings['faq']['categorySort'] ? : FALSE)
		));
	}

	/**
	 * Render the teaser action
	 *
	 * @cache 1h
	 */
	public function teaserAction() {
		$topQuestions = GeneralUtility::intExplode(',', $this->settings['faq']['topQuestions'], TRUE);
		$teaserCategories = GeneralUtility::intExplode(',', $this->settings['faq']['teaserCategories'], TRUE);
		$teaserLimit = (int)$this->settings['faq']['teaserLimit'];
		$questions = $this->questionRepository->findByTeaserConfiguration($topQuestions, $teaserCategories, $teaserLimit);
		$this->view->assign('questions', $questions);
	}

	/**
	 * Render the detail action
	 *
	 * @param \HDNET\HdnetFaq\Domain\Model\Question $question
	 */
	public function detailAction(Question $question) {
		$this->view->assign('question', $question);
	}

	/**
	 * Enter form
	 *
	 * @param \HDNET\HdnetFaq\Domain\Model\Request\QuestionRequest $question
	 * @donotvalidate $question
	 * @ignorevalidation $question
	 */
	public function formAction(QuestionRequest $question = NULL) {
		if ($question === NULL) {
			$question = new QuestionRequest();
		}

		$this->view->assign('question', $question);
	}

	/**
	 * Send action
	 *
	 * @param \HDNET\HdnetFaq\Domain\Model\Request\QuestionRequest $question
	 * @param string                                               $captcha
	 * @validate $captcha NotEmpty
	 * @validate $captcha \SJBR\SrFreecap\Validation\Validator\CaptchaValidator
	 * @view \HDNET\Hdnet\View\MailView
	 */
	public function sendAction(QuestionRequest $question, /** @noinspection PhpUnusedParameterInspection */
		$captcha) {
		$this->disableIndexing();
		$targetEmailAddress = $this->getTargetEmailAddress();
		if (GeneralUtility::validEmail($targetEmailAddress)) {
			$this->view->assign('to', array($targetEmailAddress => $targetEmailAddress));
			$this->view->assign('subject', 'Neue Frage eingestellt');
			$this->view->assign('question', $question);
			$this->view->render();
		}
		$this->forward('user');
	}

	/**
	 * user action
	 *
	 * @param \HDNET\HdnetFaq\Domain\Model\Request\QuestionRequest $question
	 * @view \HDNET\Hdnet\View\MailView
	 */
	public function userAction(QuestionRequest $question) {
		if (GeneralUtility::validEmail($question->getEmail())) {
			$this->view->assignMultiple(array(
				'subject'  => 'FAQ eingereicht',
				'to'       => array($question->getEmail() => $question->getEmail()),
				'question' => $question,
			));
			$this->view->render();
		}
		$this->forward('thanks');
	}

	/**
	 * Get the target Email address
	 *
	 * @return string
	 */
	protected function getTargetEmailAddress() {
		if (isset($this->settings['faq']['targetEmail']) && GeneralUtility::validEmail(trim($this->settings['faq']['targetEmail']))) {
			return trim($this->settings['faq']['targetEmail']);
		}
		return 'ts@hdnet.de';
	}

	/**
	 * Send action
	 *
	 * @param \HDNET\HdnetFaq\Domain\Model\Request\QuestionRequest $question
	 */
	public function thanksAction(QuestionRequest $question) {
		$this->disableIndexing();
		$this->view->assign('question', $question);
	}

}
